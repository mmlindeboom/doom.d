#+title: Doom Emacs Config
#+property: header-args :tangle config.el

* Who Am I
#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
(setq user-full-name "Matt Lindeboom"
      user-mail-address "matt@b0om.net")
#+END_SRC
 :
#+RESULTS:
: matt@b0om.net

* Theme
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Dank Mono" :size 16)
      doom-variable-pitch-font (font-spec :family "Vollkorn" :size 18)
      doom-serif-font (font-spec :family "Vollkorn")
      doom-theme 'doom-gruvbox
      display-line-numbers-type t
      )
#+END_SRC

#+RESULTS:
: t

* Visuals
#+BEGIN_SRC emacs-lisp
;;; Dashboard Customization
(when window-system
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(add-hook! '+doom-dashboard-functions :append)
(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))
(setq fancy-splash-image (concat doom-user-dir "biggreenbuddha-614.png"))
(setq-default line-spacing 0.24)
(modify-all-frames-parameters
'((right-divider-width . 10)
 (internal-border-width . 10)))
(dolist (face '(window-divider
                window-divider-first-pixel
                window-divider-last-pixel))
(face-spec-reset-face face)
(set-face-foreground face (face-attribute 'default :background)))
(set-face-background 'fringe (face-attribute 'default :background)))

#+END_SRC

* Org Mode
#+BEGIN_SRC emacs-lisp
;;; ORG MODE
(setq org-directory "~/org/")
;; Set default, fixed and variabel pitch fonts
;; Use M-x menu-set-font to view available fonts
(when window-system
(let* ((variable-tuple
          (cond ((x-list-fonts "Rokkitt") '(:font "Rokkitt"))
                ((x-list-fonts "Sono Monospace") '(:font "Sono Monospace"))
                ((x-list-fonts "DejaVu Sans")   '(:font "DejaVu Sans"))
                ((x-list-fonts "Verdana")         '(:font "Verdana"))
                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

    (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline ,@variable-tuple))))
     `(org-level-7 ((t (,@headline ,@variable-tuple))))
     `(org-level-6 ((t (,@headline ,@variable-tuple))))
     `(org-level-5 ((t (,@headline ,@variable-tuple))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.675))))
     `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil)))))))
(use-package mixed-pitch
    :hook
    (text-mode . mixed-pitch-mode)
    :config
    (set-face-attribute 'default nil :font "Sono Monospace" :height 150)
    (set-face-attribute 'fixed-pitch nil :font "Sono Monospace")
    (set-face-attribute 'variable-pitch nil :font "Rokkitt"))
(add-hook 'mixed-pitch-mode-hook #'solaire-mode-reset)

;; Improve org mode looks
(setq org-startup-indented t
          org-pretty-entities t
          org-hide-emphasis-markers t
          org-startup-with-inline-images t
          org-image-actual-width '(300))
;; Improved Org Mode bullets
(setq org-superstar-headline-bullets-list '("⁖" "◉" "○" "✸" "✿"))
;; Show hidden emphasis markers
(use-package org-appear
  :hook (org-mode . org-appear-mode))
;; Distraction free writing mode
(use-package olivetti
    :init
    (setq olivetti-body-width .67)
    :config
    (defun distraction-free ()
      "Distraction-free writing environment"
      (interactive)
      (if (equal olivetti-mode nil)
          (progn
            (window-configuration-to-register 1)
            (delete-other-windows)
            (text-scale-increase 2)
            (olivetti-mode t))
        (progn
          (jump-to-register 1)
          (olivetti-mode 0)
          (text-scale-decrease 2))))
    :bind
    (("<f9>" . distraction-free)))
#+END_SRC

* Perspective
The Perspective package provides multiple named workspaces (or "perspectives") in Emacs, similar to multiple desktops in window managers like Awesome and XMonad.  Each perspective has its own buffer list and its own window layout. This makes it easy to work on many separate projects without getting lost in all the buffers. Switching to a perspective activates its window configuration, and when in a perspective, only its buffers are available.
#+begin_src emacs-lisp
(use-package perspective
  :bind
  ("C-x C-b" . persp-list-buffers)   ; or use a nicer switcher, see below
  :config
  (persp-mode))
#+end_src

* Projectile
#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-global-mode 1))
#+end_src

* VTerm
#+begin_src emacs-lisp
(setq shell-file-name "/usr/local/bin/fish"
      vterm-max-scrollback 5000)
#+end_src

* Which-key
Which-key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.

=NOTE:= Which-key has an annoying bug that in some fonts and font sizes, the bottom row in which key gets covered up by the modeline.

#+begin_src emacs-lisp
  (use-package which-key
  :init
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → " ))
(which-key-mode)
#+end_src
* Python
#+begin_src emacs-lisp
(set-language-environment "UTF-8")
(after! python
  (setq python-indent-offset 4))
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)
(smart-tabs-insinuate 'python 'javascript)

(require 'py-isort)
(add-hook 'before-save-hook 'py-isort-before-save)

(use-package python-black
  :demand t
  :after python
  :hook (python-mode . python-black-on-save-mode-enable-dwim))
#+end_src
